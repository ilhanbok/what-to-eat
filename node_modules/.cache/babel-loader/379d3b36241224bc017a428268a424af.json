{"ast":null,"code":"var _jsxFileName = \"/Users/wangruijia/Desktop/what-to-eat/src/components/filter/FilterPanel.js\";\nimport React, { Component } from 'react'; // components\n\nimport Filter from './Filter';\nconst COST_CATEGORY = {\n  low: 250,\n  medium: 500,\n  high: 500\n};\n\nclass FilterPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      restaurants: [],\n      establishments: {},\n      locality: {},\n      cost: {},\n      sort: {\n        \"inc\": '',\n        \"dec\": '',\n        \"rating\": ''\n      },\n      sortFilter: {\n        \"sort\": 'rating'\n      },\n      currentFilter: {\n        cost: '',\n        establishment: '',\n        locality: ''\n      },\n      responseId: this.props.responseId\n    };\n    this.applyFilter = this.applyFilter.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // console.log('Response IDs in FilterRestaurant', nextProps.responseId, ' and current ', this.props.responseId)\n    // console.log('Next props are ', nextProps)\n    if (nextProps.responseId != this.props.responseId) {\n      this.setState({\n        restaurants: [...nextProps.restaurants],\n        restaurantsOrig: [...nextProps.restaurants]\n      }, () => {\n        this.computeFilters();\n      });\n    }\n  }\n\n  computeFilters() {\n    let restaurants = [...this.state.restaurants];\n    let establishments = {};\n    let cost = {\n      \"low\": 0,\n      \"medium\": 0,\n      \"high\": 0\n    };\n    let locality = {};\n    restaurants.forEach(restaurant => {\n      // set up the cost filter\n      if (restaurant.cost < COST_CATEGORY['low']) {\n        cost[\"low\"] += 1;\n      } else if (restaurant.cost <= COST_CATEGORY['medium']) {\n        cost[\"medium\"] += 1;\n      } else {\n        cost[\"high\"] += 1;\n      } // compute different establishments count\n\n\n      restaurant.establishment.forEach(establish => {\n        let typeOfEstablishment = establish.toLowerCase(); // if establishment is already present increment it\n\n        if (establishments[typeOfEstablishment]) {\n          establishments[typeOfEstablishment] += 1;\n        } else {\n          establishments[typeOfEstablishment] = 1;\n        }\n      }); // compute the locality\n\n      if (locality[restaurant.locality]) {\n        locality[restaurant.locality] += 1;\n      } else {\n        locality[restaurant.locality] = 1;\n      }\n    });\n    this.setState({\n      cost,\n      establishments,\n      locality\n    }, () => {\n      console.log('state updated with Filters', this.state);\n    });\n  }\n\n  applyFilter(event) {\n    event.persist();\n    let filterId = event.target.parentElement.id;\n    console.log('event here', filterId);\n    let filterType = filterId.substring(0, filterId.indexOf('-'));\n    let filterValue = filterId.substr(filterId.indexOf('-') + 1);\n\n    if (filterType == 'sort') {\n      // copy the sort filter from the state\n      let sortFilter = { ...this.state.sortFilter\n      };\n      sortFilter[filterType] = filterValue; // update the state accordingly\n\n      this.setState({\n        sortFilter\n      }, () => {\n        this.sortRestaurants(filterValue);\n      });\n    } else {\n      // copy the current filter from the state\n      let currentFilter = { ...this.state.currentFilter\n      }; // if the filter is removed set it null\n      // otherwise update it accordingly\n\n      currentFilter[filterType] = currentFilter[filterType] && currentFilter[filterType] == filterValue ? '' : filterValue; // update the state accordingly\n\n      this.setState({\n        currentFilter\n      }, () => {\n        console.log('Current filter types are updated, Proceed to filter restaurants');\n        this.filterRestaurants(filterType, filterValue, currentFilter);\n      });\n    }\n  }\n\n  sortRestaurants(filterValue) {\n    let restaurantSorted = [...this.state.restaurants];\n\n    switch (filterValue) {\n      case 'inc':\n        restaurantSorted = restaurantSorted.sort((a, b) => {\n          return a.cost - b.cost;\n        });\n        break;\n\n      case 'dec':\n        restaurantSorted = restaurantSorted.sort((a, b) => {\n          return b.cost - a.cost;\n        });\n        break;\n\n      case 'rating':\n        restaurantSorted = restaurantSorted.sort((a, b) => {\n          return b.rating - a.rating;\n        });\n        break;\n    }\n\n    this.props.updateFilter(restaurantSorted); // this.setState({ modifyOriginalRestaurants: false })\n  } // function to filter restaurants accoring to cost, establishment and locality\n\n\n  filterRestaurants(filterType, filterValue, currentFilter) {\n    // copy the list of original restaurants saved in the state\n    let restaurantsFiltered = [...this.state.restaurantsOrig]; // apply all the filters one by one    \n\n    if (currentFilter['establishment']) {\n      restaurantsFiltered = restaurantsFiltered.filter(restaurant => {\n        return restaurant.establishment.join(',').toLowerCase().indexOf(currentFilter['establishment']) > -1;\n      });\n    }\n\n    if (currentFilter['locality']) {\n      restaurantsFiltered = restaurantsFiltered.filter(restaurant => {\n        return restaurant.locality == currentFilter['locality'];\n      });\n    }\n\n    if (currentFilter['cost']) {\n      // console.log('cost catergory', filterValue)\n      switch (currentFilter['cost']) {\n        case 'low':\n          restaurantsFiltered = restaurantsFiltered.filter(restaurant => {\n            return restaurant.cost < COST_CATEGORY[currentFilter['cost']];\n          });\n          break;\n\n        case 'medium':\n          restaurantsFiltered = restaurantsFiltered.filter(restaurant => {\n            return restaurant.cost <= COST_CATEGORY[currentFilter['cost']];\n          });\n          break;\n\n        case 'high':\n          restaurantsFiltered = restaurantsFiltered.filter(restaurant => {\n            return restaurant.cost > COST_CATEGORY[currentFilter['cost']];\n          });\n          break;\n      }\n    }\n\n    this.setState({\n      restaurants: restaurantsFiltered\n    }, () => {\n      this.computeFilters(); // console.log('Filtered restaurants are', this.state)\n\n      this.props.updateFilter(restaurantsFiltered);\n    });\n  } // render \n\n\n  render() {\n    let {\n      cost,\n      establishments,\n      locality,\n      sort,\n      currentFilter,\n      sortFilter\n    } = this.state;\n    currentFilter['sort'] = sortFilter['sort'];\n    let allFilters = [{\n      name: 'sort',\n      items: sort\n    }, {\n      name: 'cost',\n      items: cost\n    }, {\n      name: 'establishment',\n      items: establishments\n    }, {\n      name: 'locality',\n      items: locality\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filter-restaurants\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }\n    }, allFilters.map((ele, index) => {\n      return /*#__PURE__*/React.createElement(Filter, {\n        key: index,\n        name: ele.name,\n        items: ele.items,\n        applyFilter: this.applyFilter,\n        currentFilter: currentFilter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }\n      });\n    }));\n  }\n\n}\n\n;\nexport default FilterPanel;","map":{"version":3,"sources":["/Users/wangruijia/Desktop/what-to-eat/src/components/filter/FilterPanel.js"],"names":["React","Component","Filter","COST_CATEGORY","low","medium","high","FilterPanel","constructor","props","state","restaurants","establishments","locality","cost","sort","sortFilter","currentFilter","establishment","responseId","applyFilter","bind","componentWillReceiveProps","nextProps","setState","restaurantsOrig","computeFilters","forEach","restaurant","establish","typeOfEstablishment","toLowerCase","console","log","event","persist","filterId","target","parentElement","id","filterType","substring","indexOf","filterValue","substr","sortRestaurants","filterRestaurants","restaurantSorted","a","b","rating","updateFilter","restaurantsFiltered","filter","join","render","allFilters","name","items","map","ele","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n// components\nimport Filter from './Filter'\n\nconst COST_CATEGORY = { low: 250, medium: 500, high: 500 }\n\nclass FilterPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      restaurants: [],\n\n      establishments: {},\n      locality: {},\n      cost: {},\n\n      sort: {\n        \"inc\": '',\n        \"dec\": '',\n        \"rating\": ''\n      },\n      sortFilter: {\n        \"sort\": 'rating'\n      },\n\n      currentFilter: {\n        cost: '',\n        establishment: '',\n        locality: ''\n      },\n\n      responseId: this.props.responseId\n    }\n\n    this.applyFilter = this.applyFilter.bind(this)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // console.log('Response IDs in FilterRestaurant', nextProps.responseId, ' and current ', this.props.responseId)\n    // console.log('Next props are ', nextProps)\n    if (nextProps.responseId != this.props.responseId) {\n      this.setState({ restaurants: [...nextProps.restaurants], restaurantsOrig: [...nextProps.restaurants] }, () => {\n        this.computeFilters()\n      })\n    }\n  }\n\n  computeFilters() {\n    let restaurants = [...this.state.restaurants]\n\n    let establishments = {}\n    let cost = { \"low\": 0, \"medium\": 0, \"high\": 0 }\n    let locality = {}\n\n    restaurants.forEach((restaurant) => {\n\n      // set up the cost filter\n      if (restaurant.cost < COST_CATEGORY['low']) {\n        cost[\"low\"] += 1\n      } else if (restaurant.cost <= COST_CATEGORY['medium']) {\n        cost[\"medium\"] += 1\n      } else {\n        cost[\"high\"] += 1\n      }\n\n      // compute different establishments count\n      restaurant.establishment.forEach((establish) => {\n        let typeOfEstablishment = establish.toLowerCase()\n\n        // if establishment is already present increment it\n        if (establishments[typeOfEstablishment]) {\n          establishments[typeOfEstablishment] += 1\n        } else {\n          establishments[typeOfEstablishment] = 1\n        }\n      })\n\n      // compute the locality\n      if (locality[restaurant.locality]) {\n        locality[restaurant.locality] += 1\n      } else {\n        locality[restaurant.locality] = 1\n      }\n    })\n\n    this.setState({ cost, establishments, locality }, () => {\n      console.log('state updated with Filters', this.state)\n    })\n  }\n\n  applyFilter(event) {\n    event.persist()\n    let filterId = event.target.parentElement.id\n    console.log('event here', filterId)\n\n\n    let filterType = filterId.substring(0, filterId.indexOf('-'))\n    let filterValue = filterId.substr(filterId.indexOf('-') + 1)\n\n    if (filterType == 'sort') {\n      // copy the sort filter from the state\n      let sortFilter = { ...this.state.sortFilter }\n      sortFilter[filterType] = filterValue\n\n      // update the state accordingly\n      this.setState({ sortFilter }, () => {\n        this.sortRestaurants(filterValue)\n      })\n\n    } else {\n\n      // copy the current filter from the state\n      let currentFilter = { ...this.state.currentFilter }\n\n      // if the filter is removed set it null\n      // otherwise update it accordingly\n      currentFilter[filterType] = (currentFilter[filterType] && currentFilter[filterType] == filterValue) ? '' : filterValue\n\n      // update the state accordingly\n      this.setState({ currentFilter }, () => {\n        console.log('Current filter types are updated, Proceed to filter restaurants')\n        this.filterRestaurants(filterType, filterValue, currentFilter)\n      })\n    }\n  }\n\n  sortRestaurants(filterValue) {\n    let restaurantSorted = [...this.state.restaurants]\n\n    switch (filterValue) {\n      case 'inc':\n        restaurantSorted = restaurantSorted.sort((a, b) => { return a.cost - b.cost })\n        break;\n      case 'dec':\n        restaurantSorted = restaurantSorted.sort((a, b) => { return b.cost - a.cost })\n        break;\n      case 'rating':\n        restaurantSorted = restaurantSorted.sort((a, b) => { return b.rating - a.rating })\n        break;\n    }\n\n    this.props.updateFilter(restaurantSorted)\n    // this.setState({ modifyOriginalRestaurants: false })\n  }\n\n  // function to filter restaurants accoring to cost, establishment and locality\n  filterRestaurants(filterType, filterValue, currentFilter) {\n\n    // copy the list of original restaurants saved in the state\n    let restaurantsFiltered = [...this.state.restaurantsOrig]\n\n    // apply all the filters one by one    \n    if (currentFilter['establishment']) {\n      restaurantsFiltered = restaurantsFiltered.filter((restaurant) => {\n        return restaurant.establishment.join(',').toLowerCase().indexOf(currentFilter['establishment']) > -1\n      })\n    }\n\n    if (currentFilter['locality']) {\n      restaurantsFiltered = restaurantsFiltered.filter((restaurant) => {\n        return restaurant.locality == currentFilter['locality']\n      })\n    }\n\n    if (currentFilter['cost']) {\n      // console.log('cost catergory', filterValue)\n      switch (currentFilter['cost']) {\n        case 'low':\n          restaurantsFiltered = restaurantsFiltered.filter((restaurant) => {\n            return restaurant.cost < COST_CATEGORY[currentFilter['cost']]\n          })\n          break;\n        case 'medium':\n          restaurantsFiltered = restaurantsFiltered.filter((restaurant) => {\n            return restaurant.cost <= COST_CATEGORY[currentFilter['cost']]\n          })\n          break;\n        case 'high':\n          restaurantsFiltered = restaurantsFiltered.filter((restaurant) => {\n            return restaurant.cost > COST_CATEGORY[currentFilter['cost']]\n          })\n          break;\n      }\n    }\n\n    this.setState({ restaurants: restaurantsFiltered }, () => {\n      this.computeFilters()\n      // console.log('Filtered restaurants are', this.state)\n      this.props.updateFilter(restaurantsFiltered)\n    })\n  }\n\n  // render \n  render() {\n\n    let { cost, establishments, locality, sort, currentFilter, sortFilter } = this.state\n    currentFilter['sort'] = sortFilter['sort']\n\n    let allFilters = [\n      { name: 'sort', items: sort },\n      { name: 'cost', items: cost },\n      { name: 'establishment', items: establishments },\n      { name: 'locality', items: locality }\n    ]\n\n    return (\n\n      <div className=\"filter-restaurants\">\n        {\n          allFilters.map((ele, index) => {\n            return (\n              <Filter key={index} name={ele.name} items={ele.items} applyFilter={this.applyFilter} currentFilter={currentFilter} />\n            )\n          })\n        }\n\n      </div>\n    );\n  }\n};\n\n\n\nexport default FilterPanel;"]},"metadata":{},"sourceType":"module"}