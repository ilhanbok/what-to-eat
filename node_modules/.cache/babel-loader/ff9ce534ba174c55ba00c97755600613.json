{"ast":null,"code":"// import React, { Component } from 'react';\nclass Constants {\n  constructor() {\n    // list of all the constants\n    // all the URLs\n    this.url = 'http://localhost:3000/services';\n    this.login = `${this.url}/login`;\n    this.getRestaurants = `${this.url}/getrestaurants/{value}`;\n    this.getRooms = `${this.url}/getrooms/{id}`; // the Content-Type\n\n    this.header = {\n      'Content-Type': 'application/json'\n    }; // HTTP verbs\n\n    this.method = {\n      \"POST\": \"POST\",\n      \"GET\": \"GET\"\n    }; // initialize\n\n    this.theWeek = makeFormattedWeek();\n\n    this.formatDates = dateReceived => {\n      if (this.theWeek[dateReceived.substring(0, dateReceived.indexOf('T'))]) {\n        let formattedDate = this.theWeek[dateReceived.substring(0, dateReceived.indexOf('T'))];\n        return formattedDate == 'Today' ? dateReceived.substr(dateReceived.indexOf('T') + 1, 5) : formattedDate;\n      } else {\n        return `${new Date(dateReceived).getDate()}/${new Date(dateReceived).getMonth() + 1}/${new Date(dateReceived).getFullYear()}`;\n      }\n    };\n  }\n\n}\n\nfunction makeFormattedWeek() {\n  let theWeek = {}; // list of day names\n\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  for (let i = 0; i < 7; i++) {\n    // reset today\n    let today = new Date(); // get the previous dates one at a time\n\n    let prevDate = today.setDate(today.getDate() - i); // format previous date as per the need\n\n    let prevDateStr = new Date(prevDate).toISOString();\n    prevDateStr = prevDateStr.substring(0, prevDateStr.indexOf('T')); // fill the object accordingly\n\n    theWeek[prevDateStr] = i == 0 ? 'Today' : days[new Date(prevDate).getDay()];\n  }\n\n  return theWeek;\n}\n\nexport default Constants;","map":{"version":3,"sources":["/Users/wangruijia/Desktop/what-to-eat/src/components/Constants.js"],"names":["Constants","constructor","url","login","getRestaurants","getRooms","header","method","theWeek","makeFormattedWeek","formatDates","dateReceived","substring","indexOf","formattedDate","substr","Date","getDate","getMonth","getFullYear","days","i","today","prevDate","setDate","prevDateStr","toISOString","getDay"],"mappings":"AAAA;AAEA,MAAMA,SAAN,CAAgB;AAEdC,EAAAA,WAAW,GAAG;AAEZ;AAEA;AACA,SAAKC,GAAL,GAAW,gCAAX;AACA,SAAKC,KAAL,GAAc,GAAE,KAAKD,GAAI,QAAzB;AAEA,SAAKE,cAAL,GAAuB,GAAE,KAAKF,GAAI,yBAAlC;AACA,SAAKG,QAAL,GAAiB,GAAE,KAAKH,GAAI,gBAA5B,CATY,CAWZ;;AACA,SAAKI,MAAL,GAAc;AAAE,sBAAgB;AAAlB,KAAd,CAZY,CAcZ;;AACA,SAAKC,MAAL,GAAc;AACZ,cAAQ,MADI;AAEZ,aAAO;AAFK,KAAd,CAfY,CAqBZ;;AACA,SAAKC,OAAL,GAAeC,iBAAiB,EAAhC;;AAEA,SAAKC,WAAL,GAAoBC,YAAD,IAAkB;AAEnC,UAAI,KAAKH,OAAL,CAAaG,YAAY,CAACC,SAAb,CAAuB,CAAvB,EAA0BD,YAAY,CAACE,OAAb,CAAqB,GAArB,CAA1B,CAAb,CAAJ,EAAwE;AACtE,YAAIC,aAAa,GAAG,KAAKN,OAAL,CAAaG,YAAY,CAACC,SAAb,CAAuB,CAAvB,EAA0BD,YAAY,CAACE,OAAb,CAAqB,GAArB,CAA1B,CAAb,CAApB;AACA,eAAQC,aAAa,IAAI,OAAlB,GAA6BH,YAAY,CAACI,MAAb,CAAoBJ,YAAY,CAACE,OAAb,CAAqB,GAArB,IAA4B,CAAhD,EAAmD,CAAnD,CAA7B,GAAqFC,aAA5F;AACD,OAHD,MAGO;AACL,eAAQ,GAAE,IAAIE,IAAJ,CAASL,YAAT,EAAuBM,OAAvB,EAAiC,IAAG,IAAID,IAAJ,CAASL,YAAT,EAAuBO,QAAvB,KAAoC,CAAE,IAAG,IAAIF,IAAJ,CAASL,YAAT,EAAuBQ,WAAvB,EAAqC,EAA5H;AACD;AAEF,KATD;AAUD;;AApCa;;AAwChB,SAASV,iBAAT,GAA6B;AAC3B,MAAID,OAAO,GAAG,EAAd,CAD2B,CAG3B;;AACA,QAAMY,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B;AACA,QAAIC,KAAK,GAAG,IAAIN,IAAJ,EAAZ,CAF0B,CAI1B;;AACA,QAAIO,QAAQ,GAAGD,KAAK,CAACE,OAAN,CAAcF,KAAK,CAACL,OAAN,KAAkBI,CAAhC,CAAf,CAL0B,CAO1B;;AACA,QAAII,WAAW,GAAG,IAAIT,IAAJ,CAASO,QAAT,EAAmBG,WAAnB,EAAlB;AACAD,IAAAA,WAAW,GAAGA,WAAW,CAACb,SAAZ,CAAsB,CAAtB,EAAyBa,WAAW,CAACZ,OAAZ,CAAoB,GAApB,CAAzB,CAAd,CAT0B,CAW1B;;AACAL,IAAAA,OAAO,CAACiB,WAAD,CAAP,GAAwBJ,CAAC,IAAI,CAAN,GAAW,OAAX,GAAqBD,IAAI,CAAC,IAAIJ,IAAJ,CAASO,QAAT,EAAmBI,MAAnB,EAAD,CAAhD;AACD;;AACD,SAAOnB,OAAP;AACD;;AAGD,eAAeR,SAAf","sourcesContent":["// import React, { Component } from 'react';\n\nclass Constants {\n\n  constructor() {\n\n    // list of all the constants\n\n    // all the URLs\n    this.url = 'http://localhost:3000/services'\n    this.login = `${this.url}/login`\n\n    this.getRestaurants = `${this.url}/getrestaurants/{value}`\n    this.getRooms = `${this.url}/getrooms/{id}`\n\n    // the Content-Type\n    this.header = { 'Content-Type': 'application/json' }\n\n    // HTTP verbs\n    this.method = {\n      \"POST\": \"POST\",\n      \"GET\": \"GET\"\n    }\n\n\n    // initialize\n    this.theWeek = makeFormattedWeek()\n\n    this.formatDates = (dateReceived) => {\n\n      if (this.theWeek[dateReceived.substring(0, dateReceived.indexOf('T'))]) {\n        let formattedDate = this.theWeek[dateReceived.substring(0, dateReceived.indexOf('T'))]\n        return (formattedDate == 'Today') ? dateReceived.substr(dateReceived.indexOf('T') + 1, 5) : formattedDate\n      } else {\n        return `${new Date(dateReceived).getDate()}/${new Date(dateReceived).getMonth() + 1}/${new Date(dateReceived).getFullYear()}`\n      }\n\n    }\n  }\n}\n\n\nfunction makeFormattedWeek() {\n  let theWeek = {}\n  \n  // list of day names\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  \n  for (let i = 0; i < 7; i++) {\n    // reset today\n    let today = new Date()\n\n    // get the previous dates one at a time\n    let prevDate = today.setDate(today.getDate() - i)\n\n    // format previous date as per the need\n    let prevDateStr = new Date(prevDate).toISOString()\n    prevDateStr = prevDateStr.substring(0, prevDateStr.indexOf('T'))\n\n    // fill the object accordingly\n    theWeek[prevDateStr] = (i == 0) ? 'Today' : days[new Date(prevDate).getDay()]\n  }\n  return theWeek\n}\n\n\nexport default Constants;"]},"metadata":{},"sourceType":"module"}